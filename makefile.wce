#####################################################################

MAME_VERSION = -DMAME_VERSION=54

# set this to mame, mess or the destination you want to build
# TARGET = mame
TARGET = mess
# TARGET = neomame
# TARGET = tiny
# TARGET=tinyms

# uncomment next line to make a debug version
DEBUG = 1

# build a version for debugging games
MAME_DEBUG = -DMAME_DEBUG

# build with browser information for debugging
BSCMAKE = bscmake.exe

# command to invoke UPX (Ultimate Packer for eXecutables)
UPX = upx.exe -6 --compress-icons=0

# uncomment next line to use Assembler 68000 engine
# X86_ASM_68000 = 1

# uncomment next line to use Assembler 68020 engine
# X86_ASM_68020 = 1

# if MAME_NET is defined, network support will be compiled in
# MAME_NET = -DMAME_NET

# if MAME_MMX is defined, MMX will be compiled in
MAME_MMX = -DMAME_MMX

# use fast (register) calling convention
USE_FASTCALL = -DFASTCALL

# Define this to enable MIDAS sound
# MIDAS = 1

# uncomment next line to generate help files
# HELP = 1

# set this the operating system you're building for
# OS = win32
OS = wince
# OS = windows

# extension for executables
EXE = .exe

# CPU core include paths
VPATH=src $(wildcard src/cpu/*)

# Windows CE version
WINCE_VERSION		= wce300

# Windows CE platform (x86em | arm | mips | sh3)
ifeq "$(TARGETCPU)" "ARM"
WCEPLAT = arm
endif
ifeq "$(TARGETCPU)" "SH3"
WCEPLAT = sh3
endif
ifeq "$(TARGETCPU)" "R4100"
WCEPLAT = mips
endif
ifndef WCEPLAT
WCEPLAT = x86em
endif

# compiler, linker and utilities
AR = lib
#CC =
CCL = gcc
LD = link
RC = rc
ASM = nasmw
ASMFLAGS = -f win32
RM = rm
RMDIR = rd /S /Q
MD = -mkdir

ifeq "$(TARGET)" "mess"
MESS = 1
endif
ifeq "$(TARGET)" "tinyms"
MESS = 1
endif

ifeq "$(OS)" "wince"
ifeq "$(WCEPLAT)" "x86em"
WINDOWS_PROGRAM = -subsystem:windows -windowsce:emulation
else
WINDOWS_PROGRAM = -subsystem:windowsce
endif
else
WINDOWS_PROGRAM = -subsystem:windows
endif

CONSOLE_PROGRAM = -subsystem:console

ifdef DEBUG
NAME = $(TARGET)ced_$(WCEPLAT)
else
NAME = $(TARGET)ce_$(WCEPLAT)
endif

# build the targets in different object dirs, since mess changes
# some structures and thus they can't be linked against each other.
# cleantiny isn't needed anymore, because the tiny build has its
# own object directory too.
OBJ = obj/$(NAME)

EMULATOR = $(NAME)$(EXE)

#####################################################################
# compiler

#
# Preprocessor Definitions
#

DEFS = \
        -DWIN32 \
        -D_WINDOWS \
        -DDIRECTSOUND_VERSION=0x0300 \
        -DDIRECTDRAW_VERSION=0x0300 \
        -DDIRECTINPUT_VERSION=0x0500 \
        -DM_PI=3.1415926534 \
        -DPI=3.1415926534 \
        -DINLINE='static __inline' \
        -Dinline=__inline \
        -D__inline__=__inline \
        -DCLIB_DECL=__cdecl \
        -DDECL_SPEC=__cdecl \
        -DPNG_SAVE_SUPPORT \
        -DMAME_AVI \
        -DHAS_CPUS \
        -DHAS_SOUND \
        -DLSB_FIRST=1 \
        $(MAME_VERSION) \
        $(MAME_NET) \
        $(MAME_MMX) \
        $(MAME_DEBUG) \
        $(USE_FASTCALL)

ifeq "$(OS)" "wince"
DEFS += \
	-DUNICODE \
	-D_UNICODE \
	-DUNDER_CE=300 \
	-D_WIN32_WCE=0300 \
	-DSTRICT \
	-Dstrcasecmp=_stricmp \
	-Dstricmp=_stricmp

ifeq "$(WCEPLAT)" "x86em"
DEFS += -DX86 -D_X86_ -D_WIN32_WCE_EMULATION
endif
ifeq "$(WCEPLAT)" "arm"
DEFS += -DARM -D_ARM_
endif
ifeq "$(WCEPLAT)" "sh3"
DEFS += -DSHx -D_SHx_
endif
ifeq "$(WCEPLAT)" "mips"
DEFS += -DMIPS -D_MIPS_
endif
endif

ifndef DEBUG
DEFS += -DNDEBUG
endif

ifdef MESS
DEFS += -DMESS=1 -DMAME32NAME='"MESS32"' -DMAMENAME='"MESS"'
endif

ifdef MIDAS
DEFS += -DMIDAS
endif

INCLUDES = \
	-I. \
	-Isrc \
	-Isrc/wince \
	-Isrc/wince/crt \
	-Isrc/windows \
	-Isrc/cpu/m68000 \
	-I$(OBJ)/cpu/m68000

ifdef MESS
INCLUDES += \
        -Imess \
        -Imess/includes \
        -Imess/wince \
		-Imess/windows
endif

ifdef DX_INCPATH
INCLUDES += -I$(DX_INCPATH)
endif

ifdef ZLIB_INCPATH
INCLUDES += -I$(subst \,\\,$(ZLIB_INCPATH)) 
endif

ifdef MIDAS
ifdef MIDAS_INCPATH
INCLUDES += -I$(subst \,\\,$(MIDAS_INCPATH))
endif
endif

ifdef GX_PATH
INCLUDES += -I$(subst \,\\,$(GX_PATH))\\inc
endif

#
# C Compiler flags
#

CFLAGS = -W3 -nologo $(INCLUDES)

ifdef USE_FASTCALL
ifneq "$(OS)" "wince"
CFLAGS += -Gr
endif
endif

ifeq "$(OS)" "wince"
CFLAGS += -Gz
endif

ifdef DEBUG
CFLAGS += -Zi -Od
else
CFLAGS += -Ox -Ob2
endif

MAMEOS = $(OS)

#####################################################################
# Resources

RCDEFS = $(MAME_NET) $(MAME_MMX) -DNDEBUG $(MAME_VERSION)

RCFLAGS = -l 0x409 -I./Win32 $(MAME_DEBUG)

ifdef MESS
RCFLAGS += -DMESS -Imess/Win32 -Isrc/Win32
endif

#####################################################################
# Linker

LIBS = \
	coredll.lib \
	corelibc.lib \
	aygshell.lib \
	uuid.lib \
	gx.lib

ifdef MAME_NET
LIBS += wsock32.lib
endif

ifdef MIDAS
LIBS    += MIDASDLL.lib
ifdef MIDAS_LIBPATH
LDFLAGS += -LIBPATH:$(subst \,\\,$(MIDAS_LIBPATH))
endif
endif

ifdef DX_LIBPATH
LDFLAGS += -LIBPATH:$(subst \,\\,$(DX_LIBPATH))
endif

ifdef ZLIB_LIBPATH
LDFLAGS += -LIBPATH:$(subst \,\\,$(ZLIB_LIBPATH))
endif

ifdef GX_PATH
LDFLAGS += -LIBPATH:$(subst \,\\,$(GX_PATH))\\$(WCEPLAT)
endif

ifeq "$(OS)" "wince"
LDFLAGS += -nodefaultlib
ifeq "$(WCEPLAT)" "x86em"
LDFLAGS += -machine:ix86 
endif
ifeq "$(WCEPLAT)" "arm"
LDFLAGS += -machine:arm 
endif
ifeq "$(WCEPLAT)" "sh3"
LDFLAGS += -machine:sh3 
endif
ifeq "$(WCEPLAT)" "mips"
LDFLAGS += -machine:mips 
endif
endif

ifdef DEBUG
LDFLAGS += -debug:full
else
LDFLAGS += -release -incremental:no -map
endif

ifdef BSCMAKE
BSCDEFS = -FR$(@:%.o=%.sbr)
endif

#####################################################################

OBJDIRS = \
        obj \
        $(OBJ) \
        $(OBJ)/cpu \
        $(OBJ)/sound \
        $(OBJ)/drivers \
        $(OBJ)/machine \
        $(OBJ)/vidhrdw \
        $(OBJ)/sndhrdw \
        $(OBJ)/windows \
        $(OBJ)/wince \
		$(OBJ)/windowsui \
	$(OBJ)/zlib

ifdef MESS
# MESS object directories
OBJDIRS += \
        $(OBJ)/mess \
		$(OBJ)/mess/cpu \
		$(OBJ)/mess/sound \
        $(OBJ)/mess/systems \
        $(OBJ)/mess/machine \
        $(OBJ)/mess/vidhrdw \
        $(OBJ)/mess/sndhrdw \
        $(OBJ)/mess/tools \
        $(OBJ)/mess/tools/dat2html \
        $(OBJ)/mess/tools/imgtool \
        $(OBJ)/mess/tools/mkhdimg \
        $(OBJ)/mess/tools/messroms \
        $(OBJ)/mess/tools/mkimage \
        $(OBJ)/mess/formats \
        $(OBJ)/mess/windows \
        $(OBJ)/mess/windowsui
endif

#####################################################################

all: maketree $(EMULATOR)

# include the various .mak files
include src/core.mak
include src/$(TARGET).mak
include src/rules.mak
ifdef MESS
include src/rules_ms.mak
else
endif
include src/$(MAMEOS)/$(MAMEOS).mak

ifdef MAME_DEBUG
DBGDEFS = -DMAME_DEBUG
else
DBGDEFS =
DBGOBJS =
endif

extra:	romcmp$(EXE) $(TOOLS) $(HELPFILES)

# combine the various definitions to one
CDEFS = $(DEFS) $(COREDEFS) $(CPUDEFS) $(SOUNDDEFS) $(ASMDEFS) $(DBGDEFS) $(BSCDEFS)

$(EMULATOR): $(OBJS) $(COREOBJS) $(OSOBJS) $(DRVLIBS) $(RES) 
# always recompile the version string
	$(CC) $(CDEFS) $(CFLAGS) -FR$(OBJ)/version.sbr -Fo$(OBJ)/version.o -c src/version.c
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(WINDOWS_PROGRAM) -out:$(EMULATOR) $(LIBS) $(COREOBJS) $(OBJS) $(OSOBJS) $(DRVLIBS) $(RES)
ifdef BSCMAKE
	$(BSCMAKE) -nologo -o$(EMULATOR:%.exe=%.bsc) $(OBJS:%.o=%.sbr) $(COREOBJS:%.o=%.sbr) $(OSOBJS:%.o=%.sbr)
endif

romcmp$(EXE): $(OBJ)/romcmp.o $(OBJ)/unzip.o
	@echo Linking $@...
	$(LD) $(LDFLAGS) $(CONSOLE_PROGRAM) $(LIBS) $(OBJ)/Win32/dirent.o -out:$@ $^

ifdef PERL
$(OBJ)/cpuintrf.o: src/cpuintrf.c rules.mak
	$(PERL) src/makelist.pl
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@
endif

$(OBJ)/%.o: src/%.asm
	$(ASM) -o $@ $(ASMFLAGS) $(ASMDEFS) $<

$(OBJ)/%.o: src/%.c
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $<

$(OBJ)/wince/%.o: src/wince/%.cpp
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $<

$(OBJ)/zlib/%.o: zlib/%.c
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $<

$(OBJ)/mess/%.o: mess/%.c
	@echo [MESS] Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $<

$(OBJ)/windowsui/%.res: src/windowsui/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

$(OBJ)/wince/%.res: src/wince/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

$(OBJ)/mess/windowsui/%.res: mess/windowsui/%.rc
	@echo Compiling resources $<...
	$(RC) $(RCDEFS) $(RCFLAGS) -Fo$@ $<

# compile generated C files for the 68000 emulator
$(M68000_GENERATED_OBJS): $(OBJ)/cpu/m68000/m68kmake$(EXE)
	@echo Compiling $(subst .o,.c,$@)...
	$(CC) $(CDEFS) $(CFLAGS) -Fo$@ -c $*.c

# additional rule, because m68kcpu.c includes the generated m68kops.h :-/
$(OBJ)/cpu/m68000/m68kcpu.o: $(OBJ)/cpu/m68000/m68kmake$(EXE)

# generate C source files for the 68000 emulator
$(OBJ)/cpu/m68000/m68kmake$(EXE): src/cpu/m68000/m68kmake.c
	@echo M68K make $<...
	$(CCL) -o $@ $<
	@echo Generating M68K source files...
	$(OBJ)/cpu/m68000/m68kmake$(EXE) $(OBJ)/cpu/m68000 src/cpu/m68000/m68k_in.c

# generate asm source files for the 68000/68020 emulators
$(OBJ)/cpu/m68000/68000.asm:  src/cpu/m68000/make68k.c
	@echo Compiling $<...
	$(CCL) $(CDEFS) $(CFLAGS) -Fe$(OBJ)/cpu/m68000/make68k$(EXE) -Fo$(OBJ)/cpu/m68000/ $<
	@echo Generating $@...
	$(OBJ)/cpu/m68000/make68k$(EXE) $@ $(OBJ)/cpu/m68000/68000tab.asm 00

$(OBJ)/cpu/m68000/68020.asm:  src/cpu/m68000/make68k.c
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -Fe$(OBJ)/cpu/m68000/make68k$(EXE) -Fo$(OBJ)/cpu/m68000/ $<
	@echo Generating $@...
	$(OBJ)/cpu/m68000/make68k$(EXE) $@ $(OBJ)/cpu/m68000/68020tab.asm 20

# generated asm files for the 68000 emulator
$(OBJ)/cpu/m68000/68000.o:  $(OBJ)/cpu/m68000/68000.asm
	@echo Assembling $<...
	$(ASM) -o $@ $(ASMFLAGS) $(subst -D,-d,$(ASMDEFS)) $<

$(OBJ)/cpu/m68000/68020.o:  $(OBJ)/cpu/m68000/68020.asm
	@echo Assembling $<...
	$(ASM) -o $@ $(ASMFLAGS) $(subst -D,-d,$(ASMDEFS)) $<

$(OBJ)/%.a:
	@echo Archiving $@...
	@-$(RM) $(subst /,\,$@)
	$(AR) -nologo -out:$@ $^

makedir:
	@echo make makedir is no longer necessary, just type make

$(sort $(OBJDIRS)):
	$(MD) $(subst /,\\,$@)

maketree: $(sort $(OBJDIRS))

clean:
	@echo Deleting object tree $(OBJ)...
	@-$(RM) -r $(OBJ)
	@echo Deleting $(EMULATOR)...
	@-$(RM) $(EMULATOR)

