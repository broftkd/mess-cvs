/* These blit_xxx_line funcs use a 32bpp RGB lookup for 15/16 bpp srcs, so
   the 16 and 32 bpp versions can be autogenerated from a template, just
   like the all RGB dest versions are autogenerated. */

/**********************************
 * rgbscan
 **********************************/
INLINE void FUNC_NAME(blit_rgbscan_h_line)(SRC_PIXEL *src,
  SRC_PIXEL *end, unsigned int *dst, int dest_width, unsigned int *lookup)
{
  unsigned int *mydst = dst;
  SRC_PIXEL *mysrc;
  int p,r,g,b,y,u,v;

  for(mysrc=src; mysrc<end; mysrc++)
  {
    p = RMASK_SEMI(GETPIXEL(*mysrc));
    r = RMASK(p);  r>>=16;
    g = GMASK(p);  g>>=8;
    b = BMASK(p);
    RGB2YUV(r,g,b,y,u,v);
    *mydst++ = (y<<Y1SHIFT) | (u<<USHIFT) | (y<<Y2SHIFT) | (v<<VSHIFT);
  }

  mydst = dst + dest_width/2;
  for(mysrc=src; mysrc<end; mysrc++)
  {
    p = GMASK_SEMI(GETPIXEL(*mysrc));
    r = RMASK(p);  r>>=16;
    g = GMASK(p);  g>>=8;
    b = BMASK(p);
    RGB2YUV(r,g,b,y,u,v);
    *mydst++ = (y<<Y1SHIFT) | (u<<USHIFT) | (y<<Y2SHIFT) | (v<<VSHIFT);
  }

  mydst = dst + dest_width;
  for(mysrc=src; mysrc<end; mysrc++)
  {
    p = BMASK_SEMI(GETPIXEL(*mysrc));
    r = RMASK(p);  r>>=16;
    g = GMASK(p);  g>>=8;
    b = BMASK(p);
    RGB2YUV(r,g,b,y,u,v);
    *mydst++ = (y<<Y1SHIFT) | (u<<USHIFT) | (y<<Y2SHIFT) | (v<<VSHIFT);
  }
}

INLINE void FUNC_NAME(blit_rgbscan_v_line)(SRC_PIXEL *src,
  SRC_PIXEL *end, unsigned int *dst, int dest_width, unsigned int *lookup)
{
  int r,g,b,r2,g2,b2,y,y2,u,v;

  while(src<end)
  {
    r  = g  = b  = RMASK_SEMI(GETPIXEL(*src));
    r2 = g2 = b2 = GMASK_SEMI(GETPIXEL(*src));

    r=RMASK(r);  r>>=16;
    g=GMASK(g);  g>>=8;
    b=BMASK(b);
    r2=RMASK(r2);  r2>>=16;
    g2=GMASK(g2);  g2>>=8;
    b2=BMASK(b2);
    y  = (( 9836*r  + 19310*g  + 3750*b  ) >> 15);
    y2 = (( 9836*r2 + 19310*g2 + 3750*b2 ) >> 15);
    r+=r2; g+=g2; b+=b2;
    u = (( -5527*r - 10921*g + 16448*b ) >> 16) + 128;
    v = (( 16448*r - 13783*g -  2665*b ) >> 16) + 128;
    *dst++ = (y<<Y1SHIFT) | (u<<USHIFT) | (y2<<Y2SHIFT) | (v<<VSHIFT);

    r  = g  = b  = BMASK_SEMI(GETPIXEL(*src));
    src++;
    r2 = g2 = b2 = RMASK_SEMI(GETPIXEL(*src));

    r=RMASK(r);  r>>=16;
    g=GMASK(g);  g>>=8;
    b=BMASK(b);
    r2=RMASK(r2);  r2>>=16;
    g2=GMASK(g2);  g2>>=8;
    b2=BMASK(b2);
    y  = (( 9836*r  + 19310*g  + 3750*b  ) >> 15);
    y2 = (( 9836*r2 + 19310*g2 + 3750*b2 ) >> 15);
    r+=r2; g+=g2; b+=b2;
    u = (( -5527*r - 10921*g + 16448*b ) >> 16) + 128;
    v = (( 16448*r - 13783*g -  2665*b ) >> 16) + 128;
    *dst++ = (y<<Y1SHIFT) | (u<<USHIFT) | (y2<<Y2SHIFT) | (v<<VSHIFT);

    r  = g  = b  = GMASK_SEMI(GETPIXEL(*src));
    r2 = g2 = b2 = BMASK_SEMI(GETPIXEL(*src));
    src++;

    r=RMASK(r);  r>>=16;
    g=GMASK(g);  g>>=8;
    b=BMASK(b);
    r2=RMASK(r2);  r2>>=16;
    g2=GMASK(g2);  g2>>=8;
    b2=BMASK(b2);
    y  = (( 9836*r  + 19310*g  + 3750*b  ) >> 15);
    y2 = (( 9836*r2 + 19310*g2 + 3750*b2 ) >> 15);
    r+=r2; g+=g2; b+=b2;
    u = (( -5527*r - 10921*g + 16448*b ) >> 16) + 128;
    v = (( 16448*r - 13783*g -  2665*b ) >> 16) + 128;
    *dst++ = (y<<Y1SHIFT) | (u<<USHIFT) | (y2<<Y2SHIFT) | (v<<VSHIFT);
  }
}

/* And next all the blit loops, these are also auto generated for 16 and
   32 bpp SRC's */

BLIT_BEGIN(blit_normal)
  switch(sysdep_display_params.widthscale)
  {
    case 1:
      BLIT_LOOP(blit_normal_line_1, 1);
      break;
    case 2:
      BLIT_LOOP(blit_normal_line_2, 1);
      break;
  }
BLIT_END

INLINE void FUNC_NAME(blit_scale2x_line)(SRC_PIXEL *src0,
  SRC_PIXEL *src1, SRC_PIXEL *src2, SRC_PIXEL *end1,
  unsigned int *dst, int dest_width, unsigned int *lookup)
{
  FUNC_NAME(blit_scale2x_border)(src0, src1, src2, end1, dst, lookup);
  FUNC_NAME(blit_scale2x_border)(src2, src1, src0, end1, dst + dest_width/2,
    lookup);
}

INLINE void FUNC_NAME(blit_scale3x_line)(SRC_PIXEL *src0,
  SRC_PIXEL *src1, SRC_PIXEL *src2, SRC_PIXEL *end1,
  unsigned int *dst, int dest_width, unsigned int *lookup)
{
  FUNC_NAME(blit_scale3x_border)(src0, src1, src2, end1, dst, lookup);
  FUNC_NAME(blit_scale3x_center)(src0, src1, src2, end1, dst + dest_width/2,
    lookup);
  FUNC_NAME(blit_scale3x_border)(src2, src1, src0, end1, dst + dest_width,
    lookup);
}

BLIT_BEGIN(blit_scale2x)
  switch(sysdep_display_params.widthscale)
  {
    case 2:
      BLIT_LOOP2X(blit_scale2x_line, 2)
      break;
    case 3:
      BLIT_LOOP2X(blit_scale3x_line, 3)
      break;
  }
BLIT_END

BLIT_BEGIN(blit_scan2_h)
BLIT_LOOP(blit_scan2_h_line, 2)
BLIT_END

BLIT_BEGIN(blit_scan2_v)
BLIT_LOOP(blit_scan2_v_line, 1)
BLIT_END

BLIT_BEGIN(blit_rgbscan_h)
BLIT_LOOP(blit_rgbscan_h_line, 3)
BLIT_END

BLIT_BEGIN(blit_rgbscan_v)
BLIT_LOOP(blit_rgbscan_v_line, 1)
BLIT_END

BLIT_BEGIN(blit_scan3_h)
BLIT_LOOP(blit_scan3_h_line, 3)
BLIT_END

BLIT_BEGIN(blit_scan3_v)
BLIT_LOOP(blit_scan3_v_line, 1)
BLIT_END

BLIT_BEGIN(blit_fakescan)
  switch(sysdep_display_params.widthscale)
  {
    case 1:
      BLIT_LOOP(blit_normal_line_1, 2);
      break;
    case 2:
      BLIT_LOOP(blit_normal_line_2, 2);
      break;
  }
BLIT_END
